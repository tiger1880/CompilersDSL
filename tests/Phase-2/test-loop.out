LINE COMMENT: $ Loops
LINE COMMENT: $ while loop
DATATYPE: int
IDENTIFIER: x
EQUAL: :=
INTEGERS: 100
WHILE: until
PARENTHESIS: (
IDENTIFIER: x
CMP_OP/BRACKET: >
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: {
WHILE: until
PARENTHESIS: (
IDENTIFIER: x
CMP_OP/BRACKET: <
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: {
IDENTIFIER: a
EQUAL: :=
STRING_LITERAL: "hello"
PARENTHESIS: }
IDENTIFIER: a
EQUAL: :=
STRING_LITERAL: "bye"
PARENTHESIS: }
WHILE: until
PARENTHESIS: (
IDENTIFIER: x
CMP_OP/BRACKET: >
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: {
PARENTHESIS: }
WHILE: until
PARENTHESIS: (
IDENTIFIER: i
CMP_OP/BRACKET: <
INTEGERS: 1
PARENTHESIS: )
PARENTHESIS: {
STRING_LITERAL: "hello from the outside"
STOP: stop
PARENTHESIS: }
LINE COMMENT: $ for loop
FOR: repeat
PARENTHESIS: (
DATATYPE: int
IDENTIFIER: i
EQUAL: :=
INTEGERS: 0
SEPERATOR: |
IDENTIFIER: i
CMP_OP/BRACKET: <
IDENTIFIER: n
SEPERATOR: |
IDENTIFIER: i
UNARY: ++
PARENTHESIS: )
PARENTHESIS: {
CONSTRUCTOR: Tri
PARENTHESIS: (
IDENTIFIER: a
PUNCTUATION: ,
IDENTIFIER: b
PUNCTUATION: ,
IDENTIFIER: c
PARENTHESIS: )
IDENTIFIER: a
EQ_CMP_OP: ==
PARENTHESIS: (
INTEGERS: 1
PUNCTUATION: ,
INTEGERS: 0
PARENTHESIS: )
CONTINUE: advance
PARENTHESIS: }
LINE COMMENT: $ optional args
IDENTIFIER: i
EQUAL: :=
INTEGERS: 1000
FOR: repeat
PARENTHESIS: (
SEPERATOR: |
IDENTIFIER: i
EQ_CMP_OP: !=
IDENTIFIER: n
SEPERATOR: |
IDENTIFIER: i
UNARY: --
PARENTHESIS: )
PARENTHESIS: {
PARENTHESIS: }
FOR: repeat
PARENTHESIS: (
DATATYPE: int
IDENTIFIER: i
EQUAL: :=
INTEGERS: 0
SEPERATOR: |
SEPERATOR: |
PARENTHESIS: )
PARENTHESIS: {
IDENTIFIER: i
UNARY: ++
IDENTIFIER: i
CMP_OP/BRACKET: <
INTEGERS: 10
STOP: stop
PARENTHESIS: }
