LINE COMMENT: $ Two concentric circles of radii R and 2R with n circles of radius R/2 equally spaced between the concentric circles
FUNC: func
DATATYPE: real
IDENTIFIER: sin
PARENTHESIS: (
DATATYPE: real
IDENTIFIER: x
PARENTHESIS: )
PARENTHESIS: {
DATATYPE: real
IDENTIFIER: result
EQUAL: :=
FLOATS: 0.0
DATATYPE: real
IDENTIFIER: term
EQUAL: :=
IDENTIFIER: x
DATATYPE: int
IDENTIFIER: sign
EQUAL: :=
INTEGERS: 1
FOR: repeat
PARENTHESIS: (
DATATYPE: int
IDENTIFIER: i
EQUAL: :=
INTEGERS: 1
SEPERATOR: |
IDENTIFIER: i
CMP_OP: <=
INTEGERS: 10
SEPERATOR: |
IDENTIFIER: i
SUM_ASSIGN_OP: +:=
INTEGERS: 2
PARENTHESIS: )
PARENTHESIS: {
IDENTIFIER: result
SUM_ASSIGN_OP: +:=
IDENTIFIER: sign
OPERATORS: *
IDENTIFIER: term
IDENTIFIER: sign
ASSIGN_OP: *:=
OPERATORS: -
INTEGERS: 1
IDENTIFIER: term
ASSIGN_OP: *:=
PARENTHESIS: (
IDENTIFIER: x
OPERATORS: *
IDENTIFIER: x
PARENTHESIS: )
OPERATORS: /
PARENTHESIS: (
IDENTIFIER: i
OPERATORS: *
PARENTHESIS: (
IDENTIFIER: i
OPERATORS: +
INTEGERS: 1
PARENTHESIS: )
PARENTHESIS: )
PARENTHESIS: }
RETURN: return
IDENTIFIER: result
PARENTHESIS: }
FUNC: func
DATATYPE: real
IDENTIFIER: cos
PARENTHESIS: (
DATATYPE: real
IDENTIFIER: x
PARENTHESIS: )
PARENTHESIS: {
DATATYPE: real
IDENTIFIER: result
EQUAL: :=
FLOATS: 0.0
DATATYPE: real
IDENTIFIER: term
EQUAL: :=
FLOATS: 1.0
DATATYPE: int
IDENTIFIER: sign
EQUAL: :=
OPERATORS: -
INTEGERS: 1
DATATYPE: int
IDENTIFIER: i
EQUAL: :=
INTEGERS: 2
FOR: repeat
PARENTHESIS: (
SEPERATOR: |
IDENTIFIER: i
CMP_OP: <=
INTEGERS: 10
SEPERATOR: |
IDENTIFIER: i
SUM_ASSIGN_OP: +:=
INTEGERS: 2
PARENTHESIS: )
PARENTHESIS: {
IDENTIFIER: result
SUM_ASSIGN_OP: +:=
IDENTIFIER: sign
OPERATORS: *
IDENTIFIER: term
IDENTIFIER: sign
ASSIGN_OP: *:=
OPERATORS: -
INTEGERS: 1
IDENTIFIER: term
ASSIGN_OP: *:=
PARENTHESIS: (
IDENTIFIER: x
OPERATORS: *
IDENTIFIER: x
PARENTHESIS: )
OPERATORS: /
PARENTHESIS: (
IDENTIFIER: i
OPERATORS: *
PARENTHESIS: (
IDENTIFIER: i
OPERATORS: -
INTEGERS: 1
PARENTHESIS: )
PARENTHESIS: )
PARENTHESIS: }
RETURN: return
IDENTIFIER: result
PARENTHESIS: }
LINE COMMENT: $ global variables
DATATYPE: int
IDENTIFIER: R
EQUAL: :=
INTEGERS: 10
DATATYPE: int
IDENTIFIER: n
EQUAL: :=
INTEGERS: 5
DATATYPE: real
IDENTIFIER: pi
EQUAL: :=
FLOATS: 3.141592
FIG: fig
IDENTIFIER: circles_fig
PARENTHESIS: (
FLOATS: 0.5
PUNCTUATION: ,
PARENTHESIS: (
INTEGERS: 0
PUNCTUATION: ,
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: )
PARENTHESIS: {
DATATYPE: real
IDENTIFIER: theta
EQUAL: :=
INTEGERS: 0
WHILE: until
PARENTHESIS: (
IDENTIFIER: theta
CMP_OP/BRACKET: <
INTEGERS: 2
OPERATORS: *
IDENTIFIER: pi
PARENTHESIS: )
PARENTHESIS: {
CONSTRUCTOR: Circle
PARENTHESIS: (
IDENTIFIER: R
OPERATORS: /
FLOATS: 2.0
PUNCTUATION: ,
PARENTHESIS: (
FLOATS: 3.0
OPERATORS: *
IDENTIFIER: R
OPERATORS: /
INTEGERS: 2
OPERATORS: *
IDENTIFIER: sin
PARENTHESIS: (
IDENTIFIER: theta
PARENTHESIS: )
PUNCTUATION: ,
FLOATS: 3.0
OPERATORS: *
IDENTIFIER: R
OPERATORS: /
INTEGERS: 2
OPERATORS: *
IDENTIFIER: cos
PARENTHESIS: (
IDENTIFIER: theta
PARENTHESIS: )
PARENTHESIS: )
PARENTHESIS: )
IDENTIFIER: theta
SUM_ASSIGN_OP: +:=
IDENTIFIER: pi
OPERATORS: /
IDENTIFIER: n
PARENTHESIS: }
PARENTHESIS: }
IDENTIFIER: circles_fig
PARENTHESIS: (
INTEGERS: 1
PUNCTUATION: ,
PARENTHESIS: (
INTEGERS: 0
PUNCTUATION: ,
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: )
IDENTIFIER: circles_fig
PARENTHESIS: (
FLOATS: 0.5
PUNCTUATION: ,
PARENTHESIS: (
INTEGERS: 0
PUNCTUATION: ,
INTEGERS: 5
PARENTHESIS: )
PARENTHESIS: )
