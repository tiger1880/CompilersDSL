LINE COMMENT: $ declarations
LINE COMMENT: $ some statements are syntactically valid, but may be semantically incorrect
DATATYPE: int
IDENTIFIER: a
PUNCTUATION: ,
IDENTIFIER: b
EQUAL: :=
INTEGERS: 9
PUNCTUATION: ,
IDENTIFIER: c
DATATYPE: int
IDENTIFIER: a
PUNCTUATION: ,
IDENTIFIER: b
PUNCTUATION: ,
IDENTIFIER: c
DATATYPE: int
IDENTIFIER: a
PUNCTUATION: ,
IDENTIFIER: a
EQUAL: :=
INTEGERS: 1
OPERATORS: +
INTEGERS: 1
PUNCTUATION: ,
IDENTIFIER: b
EQUAL: :=
CONSTRUCTOR: RegPoly
PARENTHESIS: (
PARENTHESIS: )
DATATYPE: real
IDENTIFIER: f
EQUAL: :=
FLOATS: .9
PUNCTUATION: ,
IDENTIFIER: g
EQUAL: :=
FLOATS: 0.75
DATATYPE: bool
IDENTIFIER: b
EQUAL: :=
BOOLEAN: true
DATATYPE: point
IDENTIFIER: p
EQUAL: :=
PARENTHESIS: (
INTEGERS: 0
OPERATORS: +
INTEGERS: 1
PUNCTUATION: ,
INTEGERS: 0
PARENTHESIS: )
DATATYPE: angle
IDENTIFIER: a
EQUAL: :=
CMP_OP/BRACKET: <
IDENTIFIER: a
IDENTIFIER: b
IDENTIFIER: c
CMP_OP/BRACKET: >
PUNCTUATION: ,
IDENTIFIER: b
EQUAL: :=
CMP_OP/BRACKET: <
IDENTIFIER: a
IDENTIFIER: b
IDENTIFIER: c
PUNCTUATION: ,
BOOLEAN: true
CMP_OP/BRACKET: >
DATATYPE: label
IDENTIFIER: s
EQUAL: :=
STRING_LITERAL: "escaped \" quotes work"
PUNCTUATION: ,
IDENTIFIER: c
EQUAL: :=
STRING_LITERAL: "c"
PUNCTUATION: ,
IDENTIFIER: s2
EQUAL: :=
STRING_LITERAL: "No char data type, just unit length label"
DATATYPE: circle
IDENTIFIER: c
EQUAL: :=
CONSTRUCTOR: Circle
PARENTHESIS: (
IDENTIFIER: p
PUNCTUATION: ,
IDENTIFIER: q
PARENTHESIS: )
PUNCTUATION: ,
IDENTIFIER: d
EQUAL: :=
CONSTRUCTOR: Tri
PARENTHESIS: (
PARENTHESIS: )
DATATYPE: regPoly
IDENTIFIER: r
EQUAL: :=
CONSTRUCTOR: RegPoly
PARENTHESIS: (
INTEGERS: 1
PUNCTUATION: ,
INTEGERS: 2
PUNCTUATION: ,
INTEGERS: 3
PUNCTUATION: ,
INTEGERS: 4
PARENTHESIS: )
DATATYPE: line
IDENTIFIER: l
EQUAL: :=
IDENTIFIER: p
OPERATORS: -
IDENTIFIER: q
LINE COMMENT: $ arrays 
DATATYPE: line
IDENTIFIER: l
PARENTHESIS: [
PARENTHESIS: ]
EQUAL: :=
IDENTIFIER: p
OPERATORS: -
IDENTIFIER: q
LINE_OP: ->
IDENTIFIER: r
LINE_OP: <->
IDENTIFIER: s
OPERATORS: -
IDENTIFIER: t
DATATYPE: int
IDENTIFIER: a
PARENTHESIS: [
PARENTHESIS: ]
EQUAL: :=
CONSTRUCTOR: RegPoly
PARENTHESIS: (
PARENTHESIS: )
DATATYPE: int
IDENTIFIER: a
PARENTHESIS: [
INTEGERS: 10
OPERATORS: +
IDENTIFIER: p
PARENTHESIS: ]
DATATYPE: int
IDENTIFIER: a
PARENTHESIS: [
PARENTHESIS: ]
EQUAL: :=
PARENTHESIS: {
PARENTHESIS: {
INTEGERS: 1
PARENTHESIS: }
PARENTHESIS: }
PUNCTUATION: ,
IDENTIFIER: a
EQUAL: :=
INTEGERS: 1
DATATYPE: int
IDENTIFIER: a
EQUAL: :=
PARENTHESIS: {
INTEGERS: 1
PUNCTUATION: ,
INTEGERS: 2
PUNCTUATION: ,
INTEGERS: 3
PUNCTUATION: ,
INTEGERS: 4
PARENTHESIS: }
DATATYPE: int
IDENTIFIER: a
PARENTHESIS: [
PARENTHESIS: ]
PARENTHESIS: [
INTEGERS: 2
PARENTHESIS: ]
EQUAL: :=
PARENTHESIS: {
PARENTHESIS: {
INTEGERS: 1
PUNCTUATION: ,
INTEGERS: 3
PARENTHESIS: }
PUNCTUATION: ,
PARENTHESIS: {
PARENTHESIS: }
PARENTHESIS: }
DATATYPE: int
IDENTIFIER: a
PARENTHESIS: [
PARENTHESIS: ]
PARENTHESIS: [
INTEGERS: 2
PARENTHESIS: ]
EQUAL: :=
PARENTHESIS: {
PARENTHESIS: {
PARENTHESIS: {
INTEGERS: 1
PUNCTUATION: ,
INTEGERS: 3
PARENTHESIS: }
PARENTHESIS: }
PUNCTUATION: ,
PARENTHESIS: {
INTEGERS: 2
PUNCTUATION: ,
INTEGERS: 4
PARENTHESIS: }
PARENTHESIS: }
DATATYPE: int
IDENTIFIER: a
PARENTHESIS: [
PARENTHESIS: ]
PARENTHESIS: [
INTEGERS: 2
PARENTHESIS: ]
EQUAL: :=
PARENTHESIS: {
PARENTHESIS: {
PARENTHESIS: {
INTEGERS: 11
PUNCTUATION: ,
INTEGERS: 2
PARENTHESIS: }
PUNCTUATION: ,
PARENTHESIS: {
INTEGERS: 3
PARENTHESIS: }
PARENTHESIS: }
PARENTHESIS: }
DATATYPE: int
IDENTIFIER: a
PARENTHESIS: [
INTEGERS: 1
PARENTHESIS: ]
PARENTHESIS: [
PARENTHESIS: ]
EQUAL: :=
PARENTHESIS: {
PARENTHESIS: }
DATATYPE: int
IDENTIFIER: a
PARENTHESIS: [
PARENTHESIS: ]
PARENTHESIS: [
INTEGERS: 1
PARENTHESIS: ]
PARENTHESIS: [
INTEGERS: 2
PARENTHESIS: ]
PARENTHESIS: [
PARENTHESIS: ]
EQUAL: :=
PARENTHESIS: {
PARENTHESIS: {
INTEGERS: 1
PARENTHESIS: }
PUNCTUATION: ,
PARENTHESIS: {
INTEGERS: 3
OPERATORS: +
INTEGERS: 1
PARENTHESIS: }
PUNCTUATION: ,
PARENTHESIS: {
INTEGERS: 1
PARENTHESIS: }
PARENTHESIS: }
