$tri() 

$$
func linearr func_1(int x){

    point p[4]

    repeat ( int i:= x | i < x + 4 | i++ ){

        p[i-1] := ( i, i+2)
    }

    linearr l := p[0]<->p[1]<->p[2]<->p[3]
    
    return l
    
}
$$

fig triangle(1, (1,0))
{
    $linearr l := func_1(1)

    line l [3]
    
    tri t := Tri(l[0], l[1], l[2])

    point p := t.CENTROID()

    p.y +:= p.x
    
}


func int foo(int x) {
    point p[4]
    int i 
    x := x + 2
    return x + 2
}

int x
point p1 := (x,x+1)
point p2 := (x,x+1)

real d := || p1 - p2 ||

tri t := Tri(p1, p1, (0,0))

point p := t.CENTROID()

int ans := foo(x)

p.y +:= p.x


real a := .3

$$
func int foo(int c, bool f) {
    regPoly p := RegPoly(3,3)

    $Circle c := Circle((2,2),1)

    return c
}
$$

fig figure(scale := 2,center := (1,1)) {
    point p := (3,4)
    point q := (4,5)
    point r := (6.5,3.4)
    point s := (1,4)
    $line l := p<->r-q->s

    {
        int arr[][4] := {{1,2,3,4},{5,6,7,8}}

        {
            angle arr := < (1,2) (2,2) (0,0) >
        }
    }

}

printSymbolTable 
label s := "LABEL"
printSymbolTable 

Para p

{
    int _p
    bool f := true
}



real a := 7.55

func int test(int x) {
    $int arr[][4] := {{1,2,3,4},{5,6,7,"8"}}
    int b,c,d
    b +:= a
    c := true

    d := 88%7

    return d

}

func void test_2(int y,point p) {
    real b,c,f

    int d

    c := 3 + 4*5 - 9/6
    d := b/4 + c^3

    repeat (int a := 0 | a <= y^3 | a++) {
        b /:= c*f
        d -:= a
    
    }

    angle a := < (8,9) (5,6) p , false >

    $line l := p->f


}


bool h

$ point y, z

point y := (0,0)

point z := (9,9)

until (not a*5 <= <(1,2) y z >) {
    if (h) {
        stop
    }
    elif (s + a and true) {
        advance
    }
    else {
        a := a + (h or false)
    }
}

$ regPoly p := Circle( y, 5 )


{
    int x
    {
        real x := a + 2.444
    }

}

fig figure1(2,(3,3)) {
    point m,n
    tri t = Tri(m,n,k)

    real area := t.AREA()

    
}


