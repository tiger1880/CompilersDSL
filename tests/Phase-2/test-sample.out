FUNC: func
DATATYPE: int
IDENTIFIER: fact
PARENTHESIS: (
DATATYPE: int
IDENTIFIER: n
PARENTHESIS: )
PARENTHESIS: {
IF: if
PARENTHESIS: (
IDENTIFIER: n
EQ_CMP_OP: ==
INTEGERS: 1
LOGICAL_OP: or
IDENTIFIER: n
EQ_CMP_OP: ==
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: {
RETURN: return
INTEGERS: 1
PARENTHESIS: }
ELSE: else
PARENTHESIS: {
RETURN: return
PARENTHESIS: (
IDENTIFIER: fact
PARENTHESIS: (
IDENTIFIER: n
OPERATORS: -
INTEGERS: 1
PARENTHESIS: )
OPERATORS: *
IDENTIFIER: n
PARENTHESIS: )
PARENTHESIS: }
PARENTHESIS: }
LINE COMMENT: $ Figure to display the circumcircle of a triangle
FIG: fig
IDENTIFIER: figure_1
PARENTHESIS: (
INTEGERS: 1
PUNCTUATION: ,
PARENTHESIS: (
INTEGERS: 0
PUNCTUATION: ,
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: )
PARENTHESIS: {
DATATYPE: point
IDENTIFIER: a
EQUAL: :=
PARENTHESIS: (
INTEGERS: 1
PUNCTUATION: ,
INTEGERS: 2
PARENTHESIS: )
DATATYPE: point
IDENTIFIER: b
EQUAL: :=
PARENTHESIS: (
INTEGERS: 2
PUNCTUATION: ,
INTEGERS: 7
PARENTHESIS: )
DATATYPE: point
IDENTIFIER: c
EQUAL: :=
PARENTHESIS: (
INTEGERS: 7
PUNCTUATION: ,
INTEGERS: 1
PARENTHESIS: )
DATATYPE: tri
IDENTIFIER: t
EQUAL: :=
CONSTRUCTOR: Tri
PARENTHESIS: (
IDENTIFIER: a
PUNCTUATION: ,
IDENTIFIER: b
PUNCTUATION: ,
IDENTIFIER: c
PARENTHESIS: )
DATATYPE: point
IDENTIFIER: o
EQUAL: :=
IDENTIFIER: t
MEMEBER ACCESS: .
IDENTIFIER: CIRCUMCENTRE
PARENTHESIS: (
PARENTHESIS: )
DATATYPE: real
IDENTIFIER: r
EQUAL: :=
PARALLEL: ||
IDENTIFIER: a
OPERATORS: -
IDENTIFIER: o
PARALLEL: ||
DATATYPE: circle
IDENTIFIER: c
EQUAL: :=
PARENTHESIS: (
IDENTIFIER: o
PUNCTUATION: ,
IDENTIFIER: r
PARENTHESIS: )
PARENTHESIS: }
LINE COMMENT: $ Figure to display a parallelogram and its diagonals and print its area
FIG: fig
IDENTIFIER: figure_2
PARENTHESIS: (
INTEGERS: 1
PUNCTUATION: ,
PARENTHESIS: (
INTEGERS: 2
PUNCTUATION: ,
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: )
PARENTHESIS: {
DATATYPE: para
IDENTIFIER: p
EQUAL: :=
CONSTRUCTOR: Para
PARENTHESIS: (
INTEGERS: 3
PUNCTUATION: ,
INTEGERS: 60
PUNCTUATION: ,
INTEGERS: 8
PARENTHESIS: )
DATATYPE: real
IDENTIFIER: area
EQUAL: :=
IDENTIFIER: p
MEMEBER ACCESS: .
IDENTIFIER: AREA
PARENTHESIS: (
PARENTHESIS: )
IDENTIFIER: print
PARENTHESIS: (
IDENTIFIER: area
PARENTHESIS: )
PARENTHESIS: }
LINE COMMENT: $ Figure to display adjacent circles with radius equal to sequence of factorials
FIG: fig
IDENTIFIER: figure_3
PARENTHESIS: (
KEYWORD: scale
EQUAL: :=
INTEGERS: 2
PUNCTUATION: ,
KEYWORD: center
EQUAL: :=
PARENTHESIS: (
INTEGERS: 0
PUNCTUATION: ,
INTEGERS: 0
PARENTHESIS: )
PARENTHESIS: )
PARENTHESIS: {
DATATYPE: point
IDENTIFIER: p
EQUAL: :=
PARENTHESIS: (
INTEGERS: 0
PUNCTUATION: ,
INTEGERS: 0
PARENTHESIS: )
DATATYPE: int
IDENTIFIER: n
EQUAL: :=
INTEGERS: 3
FOR: repeat
PARENTHESIS: (
DATATYPE: int
IDENTIFIER: i
EQUAL: :=
INTEGERS: 1
SEPERATOR: |
IDENTIFIER: i
CMP_OP: <=
IDENTIFIER: n
SEPERATOR: |
IDENTIFIER: i
UNARY: ++
PARENTHESIS: )
PARENTHESIS: {
CONSTRUCTOR: Circle
PARENTHESIS: (
IDENTIFIER: p
PUNCTUATION: ,
IDENTIFIER: fact
PARENTHESIS: (
IDENTIFIER: i
PARENTHESIS: )
PARENTHESIS: )
IDENTIFIER: p
MEMEBER ACCESS: .
IDENTIFIER: x
EQUAL: :=
IDENTIFIER: p
MEMEBER ACCESS: .
IDENTIFIER: x
OPERATORS: +
INTEGERS: 1
PARENTHESIS: }
PARENTHESIS: }
LINE COMMENT: $ Syntax to display figures$
IDENTIFIER: figure_1
PARENTHESIS: (
PARENTHESIS: )
IDENTIFIER: figure_2
PARENTHESIS: (
PARENTHESIS: )
IDENTIFIER: figure_3
PARENTHESIS: (
PARENTHESIS: )
